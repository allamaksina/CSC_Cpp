//
// Created by alla on 25.08.22.
// global vars, static, inline

#include <iostream>

//init
extern int global; //лучше держать в заголовочных файлах
static int module_global; //доступна только в пределах модуля

//def. если нет, то проинициализируется 0
int global = 10;

int f(int start = 0){
    static int k = start; // локальная, которая ведет себя как глобальная.
    // Хранится не на стеке а в выведелнном для глобальных переменных месте.
    // Живет до конца выполнения программы, а не функции.
    //инициализация происхоит 1 раз, при первом вызове функции.

    ++global;

    return k++;
}

static void test_static(){
    int a = 10;
}
//такая функция доступна только внутри модуля.
// Поэтому в разных модулях такие функции могут иметь одинаковык имена

struct User{
    // для доступа не требуется объект. Имеет доступ к закрытым полям класса.
    static size_t count(){ return instances_;}
private:
    static size_t instances_;
    // глобальные переменные, объявленные внутри класса. Для доступа к ним объект не нужен.
    // Здесь объявление. Если private, то изменять можно только внутри кода класса.
    // Иначе можно изменять, где угодно
};

//здесь определение
size_t User::instances_ = 0;
// в остальном ничем не осталичается от глобальной.
// Определять можно в каком-либо из файлов, снаружи класса

//User::instances_ = 10; error

//int main(){
//    std::cout << User::count << std::endl;
//}
//

